"""Automatic generated by ToolBox v = 0.1.9"""
from enum import Enum
from dataclasses import dataclass





@dataclass
class WELCOME(Enum):
    NAME = 'welcome'
    VERSION: str = 'Version'  # Input: ([]), Output: <class 'inspect._empty'>
    PRINTT: str = 'printT'  # Input: ([]), Output: <class 'inspect._empty'>
    ON_START: str = 'on_start'  # Input: (), Output: None
    ANIMATION1: str = 'Animation1'  # Input: ([]), Output: <class 'inspect._empty'>
    ANIMATION: str = 'Animation'  # Input: ([]), Output: <class 'inspect._empty'>
    APP_INSTANCE: str = 'app_instance'  # Input: (), Output: None
    APP_INSTANCE_TYPE: str = 'app_instance_type'  # Input: (), Output: None


@dataclass
class CLOUDM_USERINSTANCES(Enum):
    NAME = 'CloudM.UserInstances'
    GET_SI_ID: str = 'get_si_id'  # Input: (['uid']), Output: <class 'toolboxv2.utils.system.types.Result'>
    GET_VT_ID: str = 'get_vt_id'  # Input: (['uid']), Output: <class 'toolboxv2.utils.system.types.Result'>
    GET_WEB_SOCKET_ID: str = 'get_web_socket_id'  # Input: (['uid']), Output: <class 'toolboxv2.utils.system.types.Result'>
    CLOSE_USER_INSTANCE: str = 'close_user_instance'  # Input: (['uid']), Output: <class 'inspect._empty'>
    VALIDATE_WS_ID: str = 'validate_ws_id'  # Input: (['ws_id']), Output: <class 'inspect._empty'>
    DELETE_USER_INSTANCE: str = 'delete_user_instance'  # Input: (['uid']), Output: <class 'inspect._empty'>
    SAVE_USER_INSTANCES: str = 'save_user_instances'  # Input: (['instance']), Output: <class 'inspect._empty'>
    GET_INSTANCE_SI_ID: str = 'get_instance_si_id'  # Input: (['si_id']), Output: <class 'inspect._empty'>
    GET_USER_INSTANCE: str = 'get_user_instance'  # Input: (['uid', 'hydrate']), Output: <class 'inspect._empty'>
    HYDRATE_INSTANCE: str = 'hydrate_instance'  # Input: (['instance']), Output: <class 'inspect._empty'>
    SAVE_CLOSE_USER_INSTANCE: str = 'save_close_user_instance'  # Input: (['ws_id']), Output: <class 'inspect._empty'>


@dataclass
class CLOUDM(Enum):
    NAME = 'CloudM'
    NEW_MODULE: str = 'new_module'  # Input: (['self', 'mod_name', 'options']), Output: <class 'inspect._empty'>
    CREATE_ACCOUNT: str = 'create_account'  # Input: (['self']), Output: <class 'inspect._empty'>
    INIT_GIT: str = 'init_git'  # Input: (['_']), Output: <class 'inspect._empty'>
    UPDATE_CORE: str = 'update_core'  # Input: (['self', 'backup', 'name']), Output: <class 'inspect._empty'>
    REGISTER_INITIAL_ROOT_USER: str = 'register_initial_root_user'  # Input: (['app']), Output: <class 'inspect._empty'>
    CLEAR_DB: str = 'clear_db'  # Input: (['self', 'do_root']), Output: <class 'inspect._empty'>
    SHOW_VERSION: str = 'show_version'  # Input: (['self']), Output: <class 'inspect._empty'>
    APP_INSTANCE: str = 'app_instance'  # Input: (), Output: None
    APP_INSTANCE_TYPE: str = 'app_instance_type'  # Input: (), Output: None
    MODINSTALLER: str = 'mod-installer'  # Input: (['name']), Output: <class 'inspect._empty'>
    MODUNINSTALLER: str = 'mod-uninstaller'  # Input: (['name']), Output: <class 'inspect._empty'>


@dataclass
class SOCKETMANAGER(Enum):
    NAME = 'SocketManager'
    CREATE_SOCKET: str = 'create_socket'  # Input: (['self', 'name', 'host', 'port', 'type_id', 'max_connections', 'endpoint_port', 'return_full_object', 'keepalive_interval', 'test_override', 'package_size', 'start_keep_alive']), Output: <class 'inspect._empty'>
    RUN_AS_IP_ECHO_SERVER_A: str = 'run_as_ip_echo_server_a'  # Input: (['self', 'name', 'host', 'port', 'max_connections', 'test_override']), Output: <class 'inspect._empty'>
    RUN_AS_SINGLE_COMMUNICATION_SERVER: str = 'run_as_single_communication_server'  # Input: (['self', 'name', 'host', 'port', 'test_override']), Output: <class 'inspect._empty'>
    SEND_FILE_TO_SEVER: str = 'send_file_to_sever'  # Input: (['self', 'filepath', 'host', 'port']), Output: <class 'inspect._empty'>
    RECEIVE_AND_DECOMPRESS_FILE_AS_SERVER: str = 'receive_and_decompress_file_as_server'  # Input: (['self', 'save_path', 'listening_port']), Output: <class 'inspect._empty'>
    SEND_FILE_TO_PEER: str = 'send_file_to_peer'  # Input: (['self', 'filepath', 'host', 'port']), Output: <class 'inspect._empty'>
    RECEIVE_AND_DECOMPRESS_FILE: str = 'receive_and_decompress_file'  # Input: (['self', 'save_path', 'listening_port', 'sender_ip']), Output: <class 'inspect._empty'>
    APP_INSTANCE: str = 'app_instance'  # Input: (), Output: None
    APP_INSTANCE_TYPE: str = 'app_instance_type'  # Input: (), Output: None
    SOCKETMANAGER_0: str = 'SocketManager_0'  # Input: (['name', 'host', 'port', 'type_id', 'max_connections', 'endpoint_port', 'return_full_object', 'keepalive_interval', 'test_override', 'package_size', 'start_keep_alive']), Output: <class 'inspect._empty'>
    TBSOCKETCONTROLLER: str = 'tbSocketController'  # Input: (['name', 'host', 'port', 'test_override']), Output: <class 'inspect._empty'>
    VERSION: str = 'Version'  # Input: ([]), Output: <class 'inspect._empty'>


@dataclass
class DB(Enum):
    NAME = 'DB'
    VERSION: str = 'Version'  # Input: (['self']), Output: <class 'inspect._empty'>
    GET: str = 'get'  # Input: (['self', 'query']), Output: <class 'toolboxv2.utils.system.types.Result'>
    IF_EXIST: str = 'if_exist'  # Input: (['self', 'query']), Output: <class 'toolboxv2.utils.system.types.Result'>
    SET: str = 'set'  # Input: (['self', 'query', 'data']), Output: <class 'toolboxv2.utils.system.types.Result'>
    INITIALIZED: str = 'initialized'  # Input: (['self']), Output: <class 'bool'>
    DELETE: str = 'delete'  # Input: (['self', 'query', 'matching']), Output: <class 'toolboxv2.utils.system.types.Result'>
    APPEND_ON_SET: str = 'append_on_set'  # Input: (['self', 'query', 'data']), Output: <class 'toolboxv2.utils.system.types.Result'>
    INITIALIZE_DATABASE: str = 'initialize_database'  # Input: (['self']), Output: <class 'toolboxv2.utils.system.types.Result'>
    ON_START: str = 'on_start'  # Input: (), Output: None
    CLOSE_DB: str = 'close_db'  # Input: (['self']), Output: <class 'toolboxv2.utils.system.types.Result'>
    ON_EXIT: str = 'on_exit'  # Input: (), Output: None
    EDIT_PROGRAMMABLE: str = 'edit_programmable'  # Input: (['self', 'mode']), Output: <class 'inspect._empty'>
    EDIT_CLI: str = 'edit_cli'  # Input: (['self', 'mode']), Output: <class 'inspect._empty'>
    EDIT_DEV_WEB_UI: str = 'edit_dev_web_ui'  # Input: (['self', 'mode']), Output: <class 'inspect._empty'>
    APP_INSTANCE: str = 'app_instance'  # Input: (), Output: None
    APP_INSTANCE_TYPE: str = 'app_instance_type'  # Input: (), Output: None


@dataclass
class CLI_FUNCTIONS(Enum):
    NAME = 'cli_functions'
    VERSION: str = 'Version'  # Input: ([]), Output: <class 'inspect._empty'>
    GET_CHARACTER: str = 'get_character'  # Input: ([]), Output: <class 'inspect._empty'>
    GET_GENERATOR: str = 'get_generator'  # Input: ([]), Output: <class 'inspect._empty'>
    UPDATE_AUTOCOMPLETION_MODS: str = 'update_autocompletion_mods'  # Input: (['app', 'autocompletion_dict']), Output: <class 'inspect._empty'>
    UPDATE_AUTOCOMPLETION_LIST_OR_KEY: str = 'update_autocompletion_list_or_key'  # Input: (['list_or_key', 'autocompletion_dict', 'raise_e', 'do_lower']), Output: <class 'inspect._empty'>
    USER_INPUT: str = 'user_input'  # Input: (['app', 'completer_dict', 'get_rprompt', 'bottom_toolbar', 'active_modul', 'password', 'bindings', 'message']), Output: <class 'toolboxv2.utils.system.types.CallingObject'>
    CO_EVALUATE: str = 'co_evaluate'  # Input: (['app', 'obj', 'build_in_commands', 'threaded', 'helper', 'return_parm']), Output: <class 'inspect._empty'>
    APP_INSTANCE: str = 'app_instance'  # Input: (), Output: None
    APP_INSTANCE_TYPE: str = 'app_instance_type'  # Input: (), Output: None
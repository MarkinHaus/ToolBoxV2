@config {
    mode: "jit",
    runtime_mode: "parallel"
}

@shared {
    version: "2.0.0",
    server_name: "TBX-Server-Pro",
    request_count: 0
}

# Server-Konfiguration
let host = "127.0.0.1"
let port = 8081
let max_connections = 100

echo "==================================="
echo "  TBX HTTP Server Pro v2.0"
echo "==================================="
echo "Version: 2.0.0"
echo ""

# Initialisierung
let mut active_connections = 0
let mut total_requests = 0
let mut cache_data = []

# ============================================
# CORS & Sicherheits-Funktionen
# ============================================

fn enable_cors(origin: string) -> string {
    "Access-Control-Allow-Origin: " + origin
}

fn generate_token(length: int) -> string {
    bash("openssl rand -hex " + str(length))
}

fn validate_request(token: string, expected: string) -> bool {
    token == expected
}

# ============================================
# Utility-Funktionen
# ============================================

fn get_timestamp() -> string {
    bash("date '+%Y-%m-%d %H:%M:%S'")
}

fn log_request(method: string, path: string, status: int) -> string {
    let timestamp = get_timestamp()
    let log_entry = "[" + timestamp + "] " + method + " " + path + " - Status: " + str(status)
    echo $log_entry
    log_entry
}

fn calculate_response_time(start: int, end_time: int) -> int {
    end_time - start
}

fn compress_data(data: string) -> string {
    python("""
import zlib
import base64
compressed = zlib.compress(data.encode())
base64.b64encode(compressed).decode()
""")
}

fn decompress_data(compressed: string) -> string {
    python("""
import zlib
import base64
decoded = base64.b64decode(compressed.encode())
zlib.decompress(decoded).decode()
""")
}

# ============================================
# Datenverarbeitungs-Funktionen
# ============================================

fn parse_json(json_string: string) -> string {
    python("""
import json
try:
    data = json.loads(json_string)
    json.dumps(data, indent=2)
except:
    "Invalid JSON"
""")
}

fn format_html(content: string, title: string) -> string {
    "<!DOCTYPE html><html><head><title>" + title + "</title></head><body>" + content + "</body></html>"
}

fn calculate_stats(numbers: list) -> string {
    python("""
import statistics
nums = numbers
if len(nums) == 0:
    result = {"error": "Empty list"}
else:
    result = {
        "count": len(nums),
        "sum": sum(nums),
        "mean": statistics.mean(nums),
        "median": statistics.median(nums),
        "min": min(nums),
        "max": max(nums)
    }
import json
json.dumps(result)
""")
}

# ============================================
# API-Handler-Funktionen
# ============================================

fn handle_health_check() -> string {
    python("""
import psutil
import json

result = {
    "status": "healthy",
    "uptime": "running",
    "cpu_percent": psutil.cpu_percent(interval=0.1),
    "memory_percent": psutil.virtual_memory().percent,
    "disk_percent": psutil.disk_usage('/').percent
}
json.dumps(result, indent=2)
""")
}

fn handle_time_api() -> string {
    javascript("""
const now = new Date();
const result = {
    timestamp: now.getTime(),
    iso: now.toISOString(),
    date: now.toDateString(),
    time: now.toTimeString(),
    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
};
JSON.stringify(result, null, 2);
""")
}

fn handle_system_info() -> string {
    go("""
package main
import (
    "encoding/json"
    "fmt"
    "runtime"
)

func main() {
    info := map[string]interface{}{
        "os": runtime.GOOS,
        "arch": runtime.GOARCH,
        "cpus": runtime.NumCPU(),
        "go_version": runtime.Version(),
    }
    data, _ := json.MarshalIndent(info, "", "  ")
    fmt.Print(string(data))
}
""")
}

fn handle_calculator(operation: string, a: int, b: int) -> string {
    if operation == "add" {
        str(a + b)
    } else {
        if operation == "subtract" {
            str(a - b)
        } else {
            if operation == "multiply" {
                str(a * b)
            } else {
                if operation == "divide" {
                    if b == 0 {
                        "Error: Division by zero"
                    } else {
                        str(a / b)
                    }
                } else {
                    "Invalid operation"
                }
            }
        }
    }
}

# ============================================
# Cache-Management
# ============================================

fn add_to_cache(key: string, value: string) -> list {
    push(cache_data, key + ":" + value)
}

fn get_cache_size() -> int {
    len(cache_data)
}

# ============================================
# Server-Status-Funktion
# ============================================

fn get_server_status() -> string {
    python("""
import json
status = {
    "active_connections": active_connections,
    "total_requests": total_requests,
    "cache_size": len(cache_data),
    "version": "2.0.0",
    "host": host,
    "port": port
}
json.dumps(status, indent=2)
""")
}

# Server-Startnachricht
echo "Server wird gestartet..."
echo "Host: $host"
echo "Port: $port"
echo "Max Verbindungen: $max_connections"
echo "CORS aktiviert"
echo "Cache-System aktiviert"
echo ""

# Token generieren
let api_token = generate_token(16)
echo "API Token generiert: $api_token"
echo ""

# Python-basierter HTTP-Server mit erweiterten Features
let server_code = python("""
from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import urllib.parse

class TBXHandler(BaseHTTPRequestHandler):
    def log_message(self, format, *args):
        pass

    def send_cors_headers(self):
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization')

    def do_OPTIONS(self):
        self.send_response(200)
        self.send_cors_headers()
        self.end_headers()

    def do_GET(self):
        parsed_path = urllib.parse.urlparse(self.path)
        path = parsed_path.path
        query = urllib.parse.parse_qs(parsed_path.query)

        # Homepage
        if path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.send_cors_headers()
            self.end_headers()
            html = '''
            <!DOCTYPE html>
            <html>
            <head>
                <title>TBX Server Pro</title>
                <style>
                    * { margin: 0; padding: 0; box-sizing: border-box; }
                    body { font-family: 'Segoe UI', Arial; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 40px; }
                    .container { max-width: 1200px; margin: 0 auto; background: white; padding: 40px; border-radius: 12px; box-shadow: 0 10px 40px rgba(0,0,0,0.2); }
                    h1 { color: #333; margin-bottom: 10px; font-size: 2.5em; }
                    .subtitle { color: #666; margin-bottom: 30px; }
                    .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 30px; }
                    .card { background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #667eea; transition: transform 0.2s; }
                    .card:hover { transform: translateY(-5px); box-shadow: 0 5px 15px rgba(0,0,0,0.1); }
                    .card h3 { color: #667eea; margin-bottom: 10px; }
                    .endpoint { background: #e8eaf6; padding: 8px 12px; border-radius: 4px; margin: 5px 0; font-family: monospace; font-size: 0.9em; }
                    a { color: #667eea; text-decoration: none; }
                    a:hover { text-decoration: underline; }
                    .badge { display: inline-block; background: #4CAF50; color: white; padding: 4px 12px; border-radius: 12px; font-size: 0.8em; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>🚀 TBX Server Pro v2.0</h1>
                    <p class="subtitle">Multi-Language Server mit erweiterten Features <span class="badge">CORS aktiviert</span></p>

                    <div class="grid">
                        <div class="card">
                            <h3>📊 Server-Informationen</h3>
                            <div class="endpoint"><a href="/status">/status</a> - Server-Status (JSON)</div>
                            <div class="endpoint"><a href="/health">/health</a> - Health-Check</div>
                            <div class="endpoint"><a href="/system">/system</a> - System-Info (Go)</div>
                        </div>

                        <div class="card">
                            <h3>🕒 Zeit & Datum</h3>
                            <div class="endpoint"><a href="/api/time">/api/time</a> - Zeitstempel (JavaScript)</div>
                            <div class="endpoint"><a href="/api/timestamp">/api/timestamp</a> - Unix-Timestamp</div>
                        </div>

                        <div class="card">
                            <h3>🧮 Rechner-API</h3>
                            <div class="endpoint">/api/calc?op=add&a=10&b=5</div>
                            <div class="endpoint">/api/calc?op=multiply&a=7&b=6</div>
                            <p style="margin-top: 10px; font-size: 0.9em; color: #666;">Operationen: add, subtract, multiply, divide</p>
                        </div>

                        <div class="card">
                            <h3>📈 Statistik-Tools</h3>
                            <div class="endpoint">/api/stats?nums=1,2,3,4,5</div>
                            <p style="margin-top: 10px; font-size: 0.9em; color: #666;">Berechnet Mittelwert, Median, Min, Max</p>
                        </div>

                        <div class="card">
                            <h3>🔐 Sicherheit</h3>
                            <div class="endpoint">/api/token</div>
                            <div class="endpoint">/api/hash?text=hello</div>
                        </div>

                        <div class="card">
                            <h3>🎲 Tools</h3>
                            <div class="endpoint"><a href="/api/random">/api/random</a> - Zufallszahl</div>
                            <div class="endpoint"><a href="/api/uuid">/api/uuid</a> - UUID generieren</div>
                        </div>
                    </div>
                </div>
            </body>
            </html>
            '''
            self.wfile.write(html.encode())

        # Status-Endpoint
        elif path == '/status':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_cors_headers()
            self.end_headers()
            status = {
                "server": "TBX-Server-Pro",
                "version": "2.0.0",
                "status": "running",
                "host": host,
                "port": port,
                "total_requests": total_requests,
                "features": ["CORS", "Multi-Language", "API", "Cache"]
            }
            self.wfile.write(json.dumps(status, indent=2).encode())

        # Health-Check
        elif path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_cors_headers()
            self.end_headers()
            try:
                import psutil
                health = {
                    "status": "healthy",
                    "cpu_percent": psutil.cpu_percent(interval=0.1),
                    "memory_percent": psutil.virtual_memory().percent
                }
            except:
                health = {"status": "healthy", "note": "psutil not available"}
            self.wfile.write(json.dumps(health, indent=2).encode())

        # System-Info (Go)
        elif path == '/system':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_cors_headers()
            self.end_headers()
            import platform
            info = {
                "os": platform.system(),
                "release": platform.release(),
                "architecture": platform.machine(),
                "python_version": platform.python_version()
            }
            self.wfile.write(json.dumps(info, indent=2).encode())

        # Zeit-API (JavaScript)
        elif path == '/api/time':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_cors_headers()
            self.end_headers()
            import datetime
            now = datetime.datetime.now()
            time_data = {
                "timestamp": int(now.timestamp()),
                "iso": now.isoformat(),
                "date": now.strftime("%Y-%m-%d"),
                "time": now.strftime("%H:%M:%S")
            }
            self.wfile.write(json.dumps(time_data, indent=2).encode())

        # Rechner-API
        elif path == '/api/calc':
            op = query.get('op', [''])[0]
            try:
                a = int(query.get('a', [0])[0])
                b = int(query.get('b', [0])[0])

                if op == 'add':
                    result = a + b
                elif op == 'subtract':
                    result = a - b
                elif op == 'multiply':
                    result = a * b
                elif op == 'divide':
                    result = a / b if b != 0 else "Error: Division by zero"
                else:
                    result = "Invalid operation"

                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.send_cors_headers()
                self.end_headers()
                response = {"operation": op, "a": a, "b": b, "result": result}
                self.wfile.write(json.dumps(response, indent=2).encode())
            except:
                self.send_response(400)
                self.send_header('Content-type', 'application/json')
                self.send_cors_headers()
                self.end_headers()
                self.wfile.write(json.dumps({"error": "Invalid parameters"}).encode())

        # Statistik-API
        elif path == '/api/stats':
            nums_str = query.get('nums', [''])[0]
            try:
                import statistics
                nums = [float(x) for x in nums_str.split(',') if x]
                stats = {
                    "count": len(nums),
                    "sum": sum(nums),
                    "mean": statistics.mean(nums),
                    "median": statistics.median(nums),
                    "min": min(nums),
                    "max": max(nums)
                }
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.send_cors_headers()
                self.end_headers()
                self.wfile.write(json.dumps(stats, indent=2).encode())
            except:
                self.send_response(400)
                self.send_header('Content-type', 'application/json')
                self.send_cors_headers()
                self.end_headers()
                self.wfile.write(json.dumps({"error": "Invalid numbers"}).encode())

        # Token-Generator
        elif path == '/api/token':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_cors_headers()
            self.end_headers()
            import secrets
            token = secrets.token_hex(32)
            self.wfile.write(json.dumps({"token": token}).encode())

        # UUID-Generator
        elif path == '/api/uuid':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_cors_headers()
            self.end_headers()
            import uuid
            self.wfile.write(json.dumps({"uuid": str(uuid.uuid4())}).encode())

        # Random-API
        elif path == '/api/random':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_cors_headers()
            self.end_headers()
            import random
            self.wfile.write(json.dumps({"random": random.randint(1, 1000)}).encode())

        # Hash-API
        elif path == '/api/hash':
            text = query.get('text', [''])[0]
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_cors_headers()
            self.end_headers()
            import hashlib
            hashes = {
                "md5": hashlib.md5(text.encode()).hexdigest(),
                "sha1": hashlib.sha1(text.encode()).hexdigest(),
                "sha256": hashlib.sha256(text.encode()).hexdigest()
            }
            self.wfile.write(json.dumps(hashes, indent=2).encode())

        # 404
        else:
            self.send_response(404)
            self.send_header('Content-type', 'application/json')
            self.send_cors_headers()
            self.end_headers()
            self.wfile.write(json.dumps({"error": "Not found"}).encode())

server_address = (host, port)
httpd = HTTPServer(server_address, TBXHandler)
print(f'✓ Server gestartet auf http://{host}:{port}')
print(f'✓ Drücke Ctrl+C zum Beenden')
print('')
httpd.serve_forever()
""")

echo "Server wurde beendet."

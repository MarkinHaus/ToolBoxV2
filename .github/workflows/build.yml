name: build

on:
    push:
        branches:
            - light-tb
            - mod-server
            - master
    pull_request:


jobs:
    py-check:
        runs-on: ${{ matrix.config.os }}
        name: ${{ matrix.config.os }} (${{ matrix.config.py }})
        strategy:
            fail-fast: false
            matrix:
                config:
                    # - { os: ubuntu-latest, py: "3.9" }
                    - { os: ubuntu-latest, py: "3.10" }
                    - { os: ubuntu-latest, py: "3.11" }
                    - { os: ubuntu-latest, py: "3.12" }
                    # - { os: windows-latest, py: "3.9" }
                    - { os: windows-latest, py: "3.10" }
                    - { os: windows-latest, py: "3.11" }
                    - { os: windows-latest, py: "3.12" }
                    # - { os: macOS-latest, py: "3.9" }
                    - { os: macOS-latest, py: "3.10" }
                    - { os: macOS-latest, py: "3.11" }
                    - { os: macOS-latest, py: "3.12" }

        env:
            SDKROOT: /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
            OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        steps:
            -   name: CHECKOUT CODE
                uses: actions/checkout@v4
            -   name: SETUP PYTHON
                uses: actions/setup-python@v4
                with:
                    python-version: ${{ matrix.config.py }}
            -   name: Install dependencies
                run: |
                    python -m pip install --upgrade pip
                    pip install --user --no-cache-dir Cython
                    pip install --user -r requirements.txt
                    pip install --user -r requirements_dev.txt
            -   name: PKG-TEST
                run: |

    test-rust:
        name: Rust Build & Test (Actix)
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v4
            -   uses: dtolnay/rust-toolchain@stable
            -   name: Build & Test Rust Server
                working-directory: ./toolboxv2/src-core
                run: |
                    cargo build --release
                    cargo test

    build-tauri:
        name: Build Tauri App
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v4
            -   uses: tauri-apps/tauri-action@v0
                working-directory: ./toolboxv2/
                with:

                    args: "build"
                env:
                    TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
                    TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: npm run tauriB

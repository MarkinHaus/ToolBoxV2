name: Release Flow

on:
  release:
    types: [published, created, prereleased]

jobs:

  build-python:
      name: Crate python Core Dis
      runs-on: ubuntu-latest
      steps:
          -   name: CHECKOUT CODE
              uses: actions/checkout@v4
          -   name: SETUP PYTHON
              uses: actions/setup-python@v4
              with:
                  python-version: 3.11
          -   name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  python -m pip install uv
                  pip install --user --no-cache-dir Cython
          -   name: Install toolboxv2 with ISAA
              run: |
                  python -m uv pip install -e toolboxv2/mods/isaa --system
                  python -m uv pip install . --system
              working-directory: ${{ github.workspace }}
          -   name: PKG-TEST
              run: |
                  python -m unittest discover -s toolboxv2/tests/
          -   name: Build distribution packages
              run: |
                  python -m pip install build
                  python -m build --outdir dist

          -   name: Upload dist artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: built-distributions
                  path: dist/*.tar.gz

  test:
    name: Run tests
    runs-on: macOS-latest
    needs: [ build-python]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install test dependencies
        run: |
            python -m pip install uv
            python -m pip install pytest

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: built-distributions
          path: dist/

      - name: Install from dist (core)
        run: |
          WHEEL_FILE=$(ls dist/*.tar.gz)
          echo "Installing $WHEEL_FILE (core)"
          python -m uv pip install "$WHEEL_FILE"[isaa] --system

      - name: Run tests
        run: tb --test -n test

  pypi-publish:
      name: Upload Release to PyPI
      runs-on: ubuntu-latest
      needs: [ build-python, test]
      if: github.event.action == 'published'
      environment:
          name: pypi
          url: https://pypi.org/p/ToolBoxV2  # ⬅️ Replace this
      permissions:
          id-token: write  # Required for PyPI trusted publishing
      steps:
          -   name: Download dist artifacts
              uses: actions/download-artifact@v4
              with:
                  name: built-distributions
                  path: dist/

          -   name: Publish to PyPI
              uses: pypa/gh-action-pypi-publish@release/v1
              with:
                  packages-dir: dist/


  test-rust:
    name: Rust Build & Test (Actix)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Build & Test Rust Server
        working-directory: ./toolboxv2/src-core
        run: |
          cargo build --release
          cargo test
      -   name: Save Rust server binary
          run: |
              mkdir -p release-artifacts/bin
              cp ./toolboxv2/src-core/target/release/simple-core-server release-artifacts/bin/

  check-tauri:
      runs-on: ubuntu-latest
      outputs:
        should_build: ${{ steps.eval.outputs.should_build }}
      steps:
        - uses: actions/checkout@v4

        - name: Evaluate build flag from tag name
          id: eval
          run: |
            tag="${{ github.event.release.tag_name }}"
            echo "Tag-Name: $tag"
            if [[ "$tag" == *"App"* ]]; then
              echo "should_build=true" >> $GITHUB_OUTPUT
            else
              echo "should_build=false" >> $GITHUB_OUTPUT
            fi

  publish-tauri:
    needs: check-tauri
    if: ${{ needs.check-tauri.outputs.should_build == 'true' }}
    name: Build Tauri App
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install frontend dependencies
        working-directory: ./toolboxv2/web
        run: |
            npm install
            cd ../simple-core
            npm install
            cd ..
            npm install
            npm run build
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: ./toolboxv2/simple-core
          distPath: ./toolboxv2/dist
          tagName: simple-v__VERSION__
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}


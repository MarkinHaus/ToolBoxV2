name: Release Flow

on:
  release:
    types: [published, created, prereleased]

jobs:

  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install test dependencies
        run: python -m pip install pytest

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: built-distributions
          path: dist/

      - name: Install from dist (core)
        run: |
          WHEEL_FILE=$(ls dist/*.whl)
          echo "Installing $WHEEL_FILE (core)"
          python -m pip install "$WHEEL_FILE"[isaa]

      - name: Run tests
        run: tb --test -n test

  pypi-publish:
      name: Upload Release to PyPI
      runs-on: ubuntu-latest
      environment:
          name: pypi
          url: https://pypi.org/p/ToolBoxV2  # ⬅️ Replace this
      permissions:
          id-token: write  # Required for PyPI trusted publishing
      steps:
          -   name: Download dist artifacts
              uses: actions/download-artifact@v4
              with:
                  name: built-distributions
                  path: dist/

          -   name: Publish to PyPI
              uses: pypa/gh-action-pypi-publish@release/v1
              with:
                  packages-dir: dist/


  test-rust:
    name: Rust Build & Test (Actix)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Build & Test Rust Server
        working-directory: ./toolboxv2/src-core
        run: |
          cargo build --release
          cargo test
      -   name: Save Rust server binary
          run: |
              mkdir -p release-artifacts/bin
              cp ./toolboxv2/src-core/target/release/simple-core-server release-artifacts/bin/

  check-tauri:
      runs-on: ubuntu-latest
      outputs:
        should_build: ${{ steps.eval.outputs.should_build }}
      steps:
        - uses: actions/checkout@v4

        - name: Evaluate build flag from tag name
          id: eval
          run: |
            tag="${{ github.event.release.tag_name }}"
            echo "Tag-Name: $tag"
            if [[ "$tag" == *"App"* ]]; then
              echo "should_build=true" >> $GITHUB_OUTPUT
            else
              echo "should_build=false" >> $GITHUB_OUTPUT
            fi

  publish-tauri:
    needs: check-tauri
    if: ${{ needs.check-tauri.outputs.should_build == 'true' }}
    name: Build Tauri App
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install frontend dependencies
        working-directory: ./toolboxv2/web
        run: |
            npm install
            cd ../simple-core
            npm install
            cd ..
            npm install
            npm run build
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: ./toolboxv2/simple-core
          distPath: ./toolboxv2/dist
          tagName: simple-v__VERSION__
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  build-docker:
      name: Build & Save Docker Image
      runs-on: ubuntu-latest
      needs: [ test-rust ]
      steps:
          -   name: Check out code
              uses: actions/checkout@v4

          -   name: Extract version from commit message
              id: version
              run: |
                set -e
                commit_msg=$(git log -1 --pretty=%B)
                echo "🔍 Commit message: $commit_msg"

                # Extract first pattern that looks like a version number x.y.z
                version=$(echo "$commit_msg" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)

                if [ -z "$version" ]; then
                  echo "❌ No version number found in commit message"
                  exit 1
                fi

                echo "✅ Found version: $version"
                echo "version=$version" >> $GITHUB_OUTPUT

          -   name: Get short Git SHA
              id: gitsha
              run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

          -   name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

          -   name: Docker metadata (labels + tags)
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: toolboxv2
                  tags: |
                      type=raw,value=${{ steps.version.outputs.version }}
                      type=raw,value=latest
                      type=raw,value=sha-${{ steps.gitsha.outputs.short_sha }}

          -   name: Build Docker image
              run: |
                  docker build \
                    --label "${{ steps.meta.outputs.labels }}" \
                    -t toolboxv2:${{ steps.version.outputs.version }} \
                    -t toolboxv2:latest \
                    -t toolboxv2:sha-${{ steps.gitsha.outputs.short_sha }} .

          -   name: Save Docker image as tar (release-artifacts)
              run: |
                  mkdir -p release-artifacts .docker-images
                  docker save toolboxv2:${{ steps.version.outputs.version }} \
                    -o release-artifacts/toolboxv2-docker-image-${{ steps.version.outputs.version }}.tar
                  cp release-artifacts/toolboxv2-docker-image-${{ steps.version.outputs.version }}.tar \
                    .docker-images/toolboxv2-latest.tar

          -   name: Upload to GitHub Release
              uses: softprops/action-gh-release@v1
              with:
                  files: |
                      Dockerfile
                      release-artifacts/toolboxv2-docker-image-${{ steps.version.outputs.version }}.tar
                      .docker-images/toolboxv2-latest.tar
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          -   name: Upload internal artifacts (CI/CD)
              uses: actions/upload-artifact@v4
              with:
                  name: docker-artifacts
                  path: |
                      release-artifacts/toolboxv2-docker-image-${{ steps.version.outputs.version }}.tar
                      .docker-images/toolboxv2-latest.tar

  notify:
    name: Notify Webhook Server
    needs: [build-docker]
    runs-on: ubuntu-latest
    steps:
      - name: Notify deployment server
        run: |
          curl -X POST "${{ secrets.DEPLOY_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{"event":"new_release", "dockerfile_url": "${{ needs.build-docker.outputs.dockerfile-url }}"}'

